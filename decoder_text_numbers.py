# -*- coding: utf-8 -*-
"""Decoder_Text_Numbers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SItH4ADeAr7ZuvxTl2_LiymZSDQ_U563
"""

import streamlit as st
from collections import Counter
import string

# English letter frequencies (percentage)
ENGLISH_FREQ = {
    'E': 12.70, 'T': 9.06, 'A': 8.17, 'O': 7.51, 'I': 6.97,
    'N': 6.75, 'S': 6.33, 'H': 6.09, 'R': 5.99, 'D': 4.25,
    'L': 4.03, 'C': 2.78, 'U': 2.76, 'M': 2.41, 'W': 2.36,
    'F': 2.23, 'G': 2.02, 'Y': 1.97, 'P': 1.93, 'B': 1.49,
    'V': 0.98, 'K': 0.77, 'J': 0.15, 'X': 0.15, 'Q': 0.10,
    'Z': 0.07
}

def frequency_analysis(text):
    """Analyze frequency of letters in text (uppercase only)"""
    text = text.upper()
    letters = [c for c in text if c in string.ascii_uppercase]
    if not letters:
        return None
    total = len(letters)
    return {letter: count/total for letter, count in Counter(letters).items()}

def chi_squared(observed, expected):
    """Calculate chi-squared statistic between observed and expected frequencies"""
    return sum((observed.get(char, 0) - expected[char])**2 / expected[char] for char in expected)

def decode(text, shift):
    """Decode text using Caesar cipher (letters and numbers)"""
    result = []
    for char in text:
        if char.isupper():
            # Decode uppercase letters
            result.append(chr((ord(char) - 65 - shift) % 26 + 65))
        elif char.islower():
            # Decode lowercase letters
            result.append(chr((ord(char) - 97 - shift) % 26 + 97))
        elif char.isdigit():
            # Decode numbers (0-9)
            result.append(str((int(char) - shift) % 10))
        else:
            # Keep other characters as-is
            result.append(char)
    return ''.join(result)

def detect_shift(encrypted_text):
    """Detect the most likely shift value using frequency analysis"""
    if not any(c.isalpha() for c in encrypted_text):
        return 0  # No letters to analyze

    encrypted_freq = frequency_analysis(encrypted_text)
    if not encrypted_freq:
        return 0

    # Method 1: Frequency matching using chi-squared
    best_shift = 0
    best_score = float('inf')

    for shift in range(26):
        expected_freq = {}
        for letter in ENGLISH_FREQ:
            shifted_letter = chr(((ord(letter) - 65 + shift) % 26) + 65)
            expected_freq[shifted_letter] = ENGLISH_FREQ[letter] / 100

        score = chi_squared(encrypted_freq, expected_freq)
        if score < best_score:
            best_score = score
            best_shift = shift

    # Method 2: Common word matching
    common_words = {'THE', 'AND', 'THAT', 'HAVE', 'FOR', 'NOT', 'WITH', 'YOU', 'THIS', 'BUT'}
    max_matches = 0
    best_word_shift = 0

    for shift in range(26):
        decrypted = decode(encrypted_text, shift)
        words = [word.upper().strip(string.punctuation) for word in decrypted.split()]
        matches = sum(word in common_words for word in words)
        if matches > max_matches:
            max_matches = matches
            best_word_shift = shift

    # Prefer word matches if we found at least 2
    return best_word_shift if max_matches >= 2 else best_shift

def auto_decode(text):
    """Automatically detect shift and decode"""
    shift = detect_shift(text)
    return decode(text, shift), shift

# ---------- Streamlit UI ---------- #
st.set_page_config(page_title="Caesar Cipher Auto Decoder", layout="wide")
st.title("üîê Caesar Cipher Auto Decoder")
st.markdown("By ~Abdulla")

tab1, tab2 = st.tabs(["Auto Decoder", "Manual Decoder"])

with tab1:
    st.header("Automatic Shift Detection")
    encoded_text = st.text_area("Enter Encoded Text:", height=150,
                              placeholder="Paste your encoded message here (letters and numbers)...")

    if st.button("Auto Decode"):
        if not encoded_text.strip():
            st.warning("Please enter some encoded text!")
        else:
            with st.spinner("Analyzing text..."):
                decoded_text, shift = auto_decode(encoded_text)
                st.success("Decoding Complete!")
                st.text_area("Decoded Text:", value=decoded_text, height=150)
                st.write(f"**Detected Shift:** {shift}")

                # Confidence indicator
                if any(word in decoded_text.upper() for word in ['THE', 'AND', 'YOU']):
                    st.success("‚úÖ High confidence in detection")
                else:
                    st.warning("‚ö†Ô∏è Medium confidence - verify manually")

with tab2:
    st.header("Manual Decoding")
    manual_text = st.text_area("Enter Text to Decode:", height=100)
    manual_shift = st.slider("Shift Amount:", 0, 25, 3)

    if st.button("Decode with Selected Shift"):
        if not manual_text.strip():
            st.warning("Please enter some text to decode!")
        else:
            decoded_text = decode(manual_text, manual_shift)
            st.text_area("Decoded Result:", value=decoded_text, height=150)

st.sidebar.markdown("""
### About This Decoder
This tool automatically detects and decodes Caesar cipher messages that may contain:
- Uppercase and lowercase letters
- Numbers (0-9)
- Special characters (unchanged)

**Note:** Works best with English text of 50+ characters
""")